public class Generic<T extends Number> {
    T[] arr;
    Generic(T[] arr) {
        this.arr = arr;
    }
    public T[] getArr() {
        return arr;
    }
    public double avg() {
        double sum = 0f;
        for (int i = 0; i < arr.length; i++) {
            sum = sum + arr[i].doubleValue();
        }
        return sum / arr.length;
    }
    public boolean isSameResult(Generic<?> a) {
        if (avg() == a.avg()) {
            return true;
        }
        return false;
    }
}




public class Main {
    public static void main(String[] args) {
        Integer[] arr1 = new Integer[] {2, 2};
        Generic<Integer> g1 = new Generic<Integer>(arr1);
        System.out.println(g1.avg());
        Float[] arr2 = new Float[] {1.5f, 2.5f};
        Generic<Float> g2 = new Generic<Float>(arr2);
        System.out.println(g2.avg());
        System.out.println(g1.isSameResult(g2));
    }
}

public class NonGeneric {
    Object o1;
    NonGeneric(Object o1) {
        this.o1 = o1;
    }
    public Object getO1() {
        return o1;
    }
    public String getType() {
        return o1.getClass().getName();
    }
}
